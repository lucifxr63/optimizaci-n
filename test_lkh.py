import os
import subprocess
import math
import csv
import time
import matplotlib.pyplot as plt
from fpdf import FPDF
import tkinter as tk
from tkinter import filedialog, simpledialog

class Ciudad:
    def __init__(self, idx, x, y):
        self.idx = idx
        self.x = float(x)
        self.y = float(y)

    def distance_to(self, other):
        return math.hypot(self.x - other.x, self.y - other.y)

def load_cities(tsp_path):
    cities = []
    with open(tsp_path, 'r') as f:
        lines = f.readlines()
        start = lines.index("NODE_COORD_SECTION\n") + 1
        for line in lines[start:]:
            if line.strip() == "EOF":
                break
            parts = line.strip().split()
            if len(parts) >= 3:
                cities.append(Ciudad(int(parts[0]) - 1, parts[1], parts[2]))
    if not cities:
        raise ValueError(f"No se cargaron ciudades desde '{tsp_path}'")
    return cities

def parse_lkh_tour(tour_file):
    with open(tour_file, 'r') as f:
        lines = f.readlines()

    tours = []
    cost = 0.0

    for line in lines:
        line = line.strip()

        if "Cost:" in line:
            try:
                value = line.split("Cost:")[1].strip().replace("_", "").replace(",", "")
                cost = float(value)
            except (IndexError, ValueError):
                cost = 0.0

        if line.startswith("1") and "(#" in line:
            try:
                route_str = line.split("(#")[0].strip()
                nodes = [int(x) - 1 for x in route_str.split() if x.isdigit()]
                if nodes and nodes[0] == 0:
                    nodes = nodes[1:]
                if nodes and nodes[-1] == 0:
                    nodes = nodes[:-1]
                tours.append(nodes)
            except Exception:
                pass

    return cost, tours

def export_routes_to_csv(rutas, file_path):
    with open(file_path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["Vendedor", "Ruta"])
        for i, ruta in enumerate(rutas, 1):
            writer.writerow([f"Vendedor {i}", "0 -> " + " -> ".join(str(n) for n in ruta) + " -> 0"])

def plot_routes(cities, rutas, save_path=None):
    colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k']
    depot = cities[0]
    plt.figure(figsize=(8, 6))
    for i, ruta in enumerate(rutas):
        color = colors[i % len(colors)]
        route_coords = [(depot.x, depot.y)] + [(cities[n].x, cities[n].y) for n in ruta] + [(depot.x, depot.y)]
        xs, ys = zip(*route_coords)
        plt.plot(xs, ys, marker='o', color=color, label=f'Vendedor {i + 1}')
    plt.scatter(depot.x, depot.y, color='black', label='Depósito', zorder=5)
    plt.title('Rutas de los vendedores')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    if save_path:
        plt.savefig(save_path)
    plt.close()

def export_table_pdf(instances, file_path):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, f"Results for Benchmark Instances (BMTSP)", ln=True, align='C')
    pdf.set_font("Arial", '', 12)
    pdf.cell(0, 10, "Generated by LKH + Python", ln=True, align='C')
    pdf.ln(10)

    headers = ["Instance", "k", "m min", "m max", "BKS", "LKH-3", "Gap %", "Time (s)"]
    col_widths = [30, 15, 20, 20, 35, 35, 20, 25]

    pdf.set_font("Arial", 'B', 12)
    for header, w in zip(headers, col_widths):
        pdf.cell(w, 10, header, 1)
    pdf.ln()

    pdf.set_font("Arial", '', 12)
    for inst in instances:
        row = [inst['name'], str(inst['k']), str(inst['mmin']), str(inst['mmax']), f"{inst['bks']:,.2f}", f"{inst['lkh']:,.2f}", f"{inst['gap']:.2f}", f"{inst['time']:.2f}"]
        for datum, w in zip(row, col_widths):
            pdf.cell(w, 10, datum, 1)
        pdf.ln()

    pdf.output(file_path)

def modify_par_file(template_path, output_path, problem_file, solution_file, k, mmin, mmax):
    with open(template_path, 'r') as f:
        lines = f.readlines()

    with open(output_path, 'w') as f:
        for line in lines:
            if line.startswith("PROBLEM_FILE"):
                f.write(f"PROBLEM_FILE = {problem_file}\n")
            elif line.startswith("MTSP_SOLUTION_FILE"):
                f.write(f"MTSP_SOLUTION_FILE = {solution_file}\n")
            elif line.startswith("SALESMEN"):
                f.write(f"SALESMEN = {k}\n")
            elif line.startswith("MTSP_MIN_SIZE"):
                f.write(f"MTSP_MIN_SIZE = {mmin}\n")
            elif line.startswith("MTSP_MAX_SIZE"):
                f.write(f"MTSP_MAX_SIZE = {mmax}\n")
            else:
                f.write(line)

def run_gui():
    root = tk.Tk()
    root.withdraw()
    tsp_paths = filedialog.askopenfilenames(title="Selecciona archivos .tsp", filetypes=[("TSP files", "*.tsp")])
    if not tsp_paths:
        print("No se seleccionaron archivos.")
        return

    k = simpledialog.askinteger("Parámetro k", "Número de vendedores (k):", initialvalue=2)
    mmin = simpledialog.askinteger("Parámetro m min", "Tamaño mínimo de ruta (m min):", initialvalue=1)
    mmax = simpledialog.askinteger("Parámetro m max", "Tamaño máximo de ruta (m max):", initialvalue=7)

    run_all_instances_gui(tsp_paths, k, mmin, mmax)

def run_all_instances_gui(tsp_paths, k=2, mmin=1, mmax=7):
    base_dir = os.path.dirname(os.path.abspath(__file__))
    par_template = os.path.join(base_dir, "lkh", "params", "example.par")
    par_tempfile = os.path.join(base_dir, "lkh", "params", "temp.par")
    tour_dir = os.path.join(base_dir, "lkh", "tours")
    pdf_output = os.path.join(tour_dir, "tabla_resultados.pdf")

    results = []

    for tsp_path in tsp_paths:
        tsp_name = os.path.splitext(os.path.basename(tsp_path))[0]
        tour_file = os.path.join(tour_dir, f"{tsp_name}.tour")

        try:
            print(f"Ejecutando {tsp_name}...")
            start_time = time.time()
            modify_par_file(par_template, par_tempfile, tsp_path, tour_file, k, mmin, mmax)
            subprocess.run([r"D:\\descargas\\LKH-3.exe", par_tempfile], check=True)
            duration = time.time() - start_time

            cost, _ = parse_lkh_tour(tour_file)
            bks = 0  # Placeholder, si se desea comparar, cargar valores reales aquí
            gap = 0.0
            results.append({
                "name": tsp_name,
                "k": k,
                "mmin": mmin,
                "mmax": mmax,
                "bks": bks,
                "lkh": cost,
                "gap": gap,
                "time": duration
            })
            print(f"{tsp_name} completado en {duration:.2f} segundos\n")
        except Exception as e:
            print(f"Error en {tsp_name}: {e}")

    export_table_pdf(results, pdf_output)

if __name__ == "__main__":
    run_gui()
